{"version":3,"file":"static/js/666.fd8922e7.chunk.js","mappings":"gNAUA,MAAMA,EAASC,IAAgC,IAA/B,SAAEC,GAAuBD,EACvC,MAAME,GAAOC,EAAAA,EAAAA,QAAmB,MAE1BC,GAAaC,EAAAA,EAAAA,cAAY,KAC7BC,SAASC,KAAKC,MAAMC,OAAS,SAAS,GACrC,IAEGC,GAAYL,EAAAA,EAAAA,cAAY,KAC5BC,SAASC,KAAKC,MAAMC,OAAS,SAAS,GACrC,IAQH,OANAE,EAAAA,EAAAA,IAAS,KACHT,EAAKU,UACPV,EAAKU,QAAQC,SAASC,GAAK,KAC7B,KAIAC,EAAAA,EAAAA,MAAA,QACEC,IAAKd,EACLD,SAAUA,EACVgB,cAAeb,EACfc,aAAcR,EAAUS,SAAA,EAExBC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,EAAG,GAAI,OAC9BD,EAAAA,EAAAA,KAAA,wBAAsBE,MAAM,cACvB,EASLC,EAAWC,IAAyC,IAAxC,SAAEvB,EAAQ,MAAEwB,GAAsBD,EAClD,MAAMtB,GAAOC,EAAAA,EAAAA,QAAmB,MAShC,OAPAQ,EAAAA,EAAAA,IAAS,KACHT,EAAKU,UACPV,EAAKU,QAAQC,SAASa,GAAKD,EAC3BvB,EAAKU,QAAQC,SAASC,GAAKW,EAC7B,KAIAV,EAAAA,EAAAA,MAAA,QAAMC,IAAKd,EAAMD,SAAUA,EAASkB,SAAA,EAClCC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,GAAK,GAAI,OAChCD,EAAAA,EAAAA,KAAA,wBAAsBE,MAAM,cACvB,EAILK,EAAgBA,KACpB,MAAMC,GAAYzB,EAAAA,EAAAA,QAChB,IAAI0B,MAAM,IAAIC,KAAK,MAAMC,KAAI,MAC3B9B,SAAU,CACgB,IAAvB+B,KAAKC,SAAW,IACO,IAAvBD,KAAKC,SAAW,IACO,IAAvBD,KAAKC,SAAW,KAEnBR,MAAuB,IAAhBO,KAAKC,SAAkB,SAEhCrB,QAEF,OACEQ,EAAAA,EAAAA,KAAAc,EAAAA,SAAA,CAAAf,SACGS,EAAUG,KAAI,CAACI,EAAUC,KACxBhB,EAAAA,EAAAA,KAACG,EAAQ,CAEPtB,SAAUkC,EAASlC,SACnBwB,MAAOU,EAASV,OAFXW,MAKR,EAIDC,EAAeA,KAEjBtB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAAf,SAAA,EACEC,EAAAA,EAAAA,KAAA,gBAAckB,UAAW,MACzBlB,EAAAA,EAAAA,KAAA,cAAYnB,SAAU,CAAC,EAAG,EAAG,MAC7BmB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACC,OAAQ,IAAKC,MAAO,GAAIC,MAAO,IAAMC,OAAQ,EAAGC,MAAI,KAC3DxB,EAAAA,EAAAA,KAACrB,EAAM,CAACE,SAAU,CAAC,EAAG,EAAG,MACzBmB,EAAAA,EAAAA,KAACO,EAAa,KACdP,EAAAA,EAAAA,KAACyB,EAAAA,EAAa,CAACC,YAAY,OAqBjC,EAhBmBC,KAEf3B,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACLC,UAAU,SACVC,OAAQ,CAAEjD,SAAU,CAAC,EAAG,EAAG,IAC3BkD,GAAI,CACFC,iBAAkBC,EAAAA,eAClBC,YAAaD,EAAAA,sBACbE,oBAAqB,GACrBpC,UAEFC,EAAAA,EAAAA,KAACiB,EAAY,K","sources":["components/SpaceScene.tsx"],"sourcesContent":["import { OrbitControls, Stars } from \"@react-three/drei\";\nimport { useRef, useCallback } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport * as THREE from 'three';\nimport { LINEAR } from '../utils/three-setup';\n\ninterface PlanetProps {\n  position: [number, number, number];\n}\n\nconst Planet = ({ position }: PlanetProps) => {\n  const mesh = useRef<THREE.Mesh>(null!);\n\n  const handleOver = useCallback(() => {\n    document.body.style.cursor = \"pointer\";\n  }, []);\n\n  const handleOut = useCallback(() => {\n    document.body.style.cursor = \"default\";\n  }, []);\n\n  useFrame(() => {\n    if (mesh.current) {\n      mesh.current.rotation.y += 0.002;\n    }\n  });\n\n  return (\n    <mesh\n      ref={mesh}\n      position={position}\n      onPointerOver={handleOver}\n      onPointerOut={handleOut}\n    >\n      <sphereGeometry args={[1, 32, 32]} />\n      <meshStandardMaterial color=\"#3b82f6\" />\n    </mesh>\n  );\n};\n\ninterface AsteroidProps {\n  position: [number, number, number];\n  speed: number;\n}\n\nconst Asteroid = ({ position, speed }: AsteroidProps) => {\n  const mesh = useRef<THREE.Mesh>(null!);\n\n  useFrame(() => {\n    if (mesh.current) {\n      mesh.current.rotation.x += speed;\n      mesh.current.rotation.y += speed;\n    }\n  });\n\n  return (\n    <mesh ref={mesh} position={position}>\n      <sphereGeometry args={[0.2, 16, 16]} />\n      <meshStandardMaterial color=\"#71717a\" />\n    </mesh>\n  );\n};\n\nconst AsteroidField = () => {\n  const asteroids = useRef(\n    new Array(20).fill(null).map(() => ({\n      position: [\n        (Math.random() - 0.5) * 10,\n        (Math.random() - 0.5) * 10,\n        (Math.random() - 0.5) * 10,\n      ] as [number, number, number],\n      speed: Math.random() * 0.01 + 0.01,\n    }))\n  ).current;\n\n  return (\n    <>\n      {asteroids.map((asteroid, idx) => (\n        <Asteroid\n          key={idx}\n          position={asteroid.position}\n          speed={asteroid.speed}\n        />\n      ))}\n    </>\n  );\n};\n\nconst SceneContent = () => {\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <pointLight position={[5, 5, 5]} />\n      <Stars radius={100} depth={50} count={5000} factor={4} fade />\n      <Planet position={[0, 0, 0]} />\n      <AsteroidField />\n      <OrbitControls enableZoom={false} />\n    </>\n  );\n};\n\nconst SpaceScene = () => {\n  return (\n    <Canvas \n      className=\"h-full\" \n      camera={{ position: [0, 0, 5] }}\n      gl={{ \n        outputColorSpace: THREE.SRGBColorSpace,\n        toneMapping: THREE.ACESFilmicToneMapping,\n        toneMappingExposure: 1\n      }}\n    >\n      <SceneContent />\n    </Canvas>\n  );\n};\n\nexport default SpaceScene;\n"],"names":["Planet","_ref","position","mesh","useRef","handleOver","useCallback","document","body","style","cursor","handleOut","useFrame","current","rotation","y","_jsxs","ref","onPointerOver","onPointerOut","children","_jsx","args","color","Asteroid","_ref2","speed","x","AsteroidField","asteroids","Array","fill","map","Math","random","_Fragment","asteroid","idx","SceneContent","intensity","Stars","radius","depth","count","factor","fade","OrbitControls","enableZoom","SpaceScene","Canvas","className","camera","gl","outputColorSpace","THREE","toneMapping","toneMappingExposure"],"sourceRoot":""}